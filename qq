DOCKER(1)                            Docker User Manuals                            DOCKER(1)

NNAAMMEE
       docker-run - Run a command in a new container

SSYYNNOOPPSSIISS
       ddoocckkeerr   rruunn  [--aa|----aattttaacchh[=_[_]]]  [----aadddd--hhoosstt[=_[_]]]  [----bbllkkiioo--wweeiigghhtt[=_[_B_L_K_I_O_-_W_E_I_G_H_T_]]]
       [----bbllkkiioo--wweeiigghhtt--ddeevviiccee[=_[_]]]  [----ccppuu--sshhaarreess[=_0]]  [----ccaapp--aadddd[=_[_]]]   [----ccaapp--ddrroopp[=_[_]]]
       [----ccggrroouuppnnss[=_[_]]]         [----ccggrroouupp--ppaarreenntt[=_C_G_R_O_U_P_-_P_A_T_H]]        [----cciiddffiillee[=_C_I_D_F_I_L_E]]
       [----ccppuu--ccoouunntt[=_0]]     [----ccppuu--ppeerrcceenntt[=_0]]     [----ccppuu--ppeerriioodd[=_0]]     [----ccppuu--qquuoottaa[=_0]]
       [----ccppuu--rrtt--ppeerriioodd[=_0]]               [----ccppuu--rrtt--rruunnttiimmee[=_0]]              [----ccppuuss[=_0_._0]]
       [----ccppuusseett--ccppuuss[=_C_P_U_S_E_T_-_C_P_U_S]]       [----ccppuusseett--mmeemmss[=_C_P_U_S_E_T_-_M_E_M_S]]        [--dd|----ddeettaacchh]
       [----ddeettaacchh--kkeeyyss[=_[_]]]            [----ddeevviiccee[=_[_]]]            [----ddeevviiccee--ccggrroouupp--rruullee[=_[_]]]
       [----ddeevviiccee--rreeaadd--bbppss[=_[_]]]      [----ddeevviiccee--rreeaadd--iiooppss[=_[_]]]      [----ddeevviiccee--wwrriittee--bbppss[=_[_]]]
       [----ddeevviiccee--wwrriittee--iiooppss[=_[_]]]    [----ddnnss[=_[_]]]   [----ddnnss--ooppttiioonn[=_[_]]]   [----ddnnss--sseeaarrcchh[=_[_]]]
       [----ddoommaaiinnnnaammee[=_D_O_M_A_I_N_N_A_M_E]]        [--ee|----eennvv[=_[_]]]         [----eennttrryyppooiinntt[=_E_N_T_R_Y_P_O_I_N_T]]
       [----eennvv--ffiillee[=_[_]]]    [----eexxppoossee[=_[_]]]   [----ggrroouupp--aadddd[=_[_]]]   [--hh|----hhoossttnnaammee[=_H_O_S_T_N_A_M_E]]
       [----hheellpp]  [----iinniitt]  [--ii|----iinntteerraaccttiivvee]  [----iipp[=_I_P_v_4_-_A_D_D_R_E_S_S]]   [----iipp66[=_I_P_v_6_-_A_D_D_R_E_S_S]]
       [----iippcc[=_I_P_C]]         [----iissoollaattiioonn[=_d_e_f_a_u_l_t]]        [----kkeerrnneell--mmeemmoorryy[=_K_E_R_N_E_L_-_M_E_M_O_R_Y]]
       [--ll|----llaabbeell[=_[_]]]     [----llaabbeell--ffiillee[=_[_]]]     [----lliinnkk[=_[_]]]     [----lliinnkk--llooccaall--iipp[=_[_]]]
       [----lloogg--ddrriivveerr[=_[_]]]               [----lloogg--oopptt[=_[_]]]              [--mm|----mmeemmoorryy[=_M_E_M_O_R_Y]]
       [----mmaacc--aaddddrreessss[=_M_A_C_-_A_D_D_R_E_S_S]]   [----mmeemmoorryy--rreesseerrvvaattiioonn[=_M_E_M_O_R_Y_-_R_E_S_E_R_V_A_T_I_O_N]]    [----mmeemm‐‐
       oorryy--sswwaapp[=_L_I_M_I_T]]     [----mmeemmoorryy--sswwaappppiinneessss[=_M_E_M_O_R_Y_-_S_W_A_P_P_I_N_E_S_S]]    [----mmoouunntt[=_[_M_O_U_N_T_]]]
       [----nnaammee[=_N_A_M_E]]  [----nneettwwoorrkk--aalliiaass[=_[_]]]  [----nneettwwoorrkk[=_"_b_r_i_d_g_e_"]]   [----oooomm--kkiillll--ddiissaabbllee]
       [----oooomm--ssccoorree--aaddjj[=_0]]     [--PP|----ppuubblliisshh--aallll]    [--pp|----ppuubblliisshh[=_[_]]]    [----ppiidd[=_[_P_I_D_]]]
       [----uusseerrnnss[=_[_]]]     [----ppiiddss--lliimmiitt[=_P_I_D_S___L_I_M_I_T]]      [----pprriivviilleeggeedd]      [----rreeaadd--oonnllyy]
       [----rreessttaarrtt[=_R_E_S_T_A_R_T]]  [----rrmm]  [----sseeccuurriittyy--oopptt[=_[_]]] [----ssttoorraaggee--oopptt[=_[_]]] [----ssttoopp--ssiigg‐‐
       nnaall[=_S_I_G_N_A_L]]   [----ssttoopp--ttiimmeeoouutt[=_T_I_M_E_O_U_T]]   [----sshhmm--ssiizzee[=_[_]]]    [----ssiigg--pprrooxxyy[=_t_r_u_e]]
       [----ssyyssccttll[=_[_]]]   [--tt|----ttttyy]  [----ttmmppffss[=_[_C_O_N_T_A_I_N_E_R_-_D_I_R_[_:_O_P_T_I_O_N_S_]]]  [--uu|----uusseerr[=_U_S_E_R]]
       [----uulliimmiitt[=_[_]]]   [----uuttss[=_[_]]]    [--vv|----vvoolluummee[=_[_[_H_O_S_T_-_D_I_R_:_]_C_O_N_T_A_I_N_E_R_-_D_I_R_[_:_O_P_T_I_O_N_S_]_]]]
       [----vvoolluummee--ddrriivveerr[=_D_R_I_V_E_R]]  [----vvoolluummeess--ffrroomm[=_[_]]] [--ww|----wwoorrkkddiirr[=_W_O_R_K_D_I_R]] IMAGE [COM‐
       MAND] [ARG...]

DDEESSCCRRIIPPTTIIOONN
       Run a process in a new container. ddoocckkeerr rruunn starts a process with its own  file  sys‐
       tem, its own networking, and its own isolated process tree. The IMAGE which starts the
       process may define defaults related to the process that will be run in the  container,
       the networking to expose, and more, but ddoocckkeerr rruunn gives final control to the operator
       or administrator who starts the container from the image. For that reason  ddoocckkeerr  rruunn
       has more options than any other Docker command.

       If  the IMAGE is not already loaded then ddoocckkeerr rruunn will pull the IMAGE, and all image
       dependencies, from the repository in the same way running ddoocckkeerr ppuullll IMAGE, before it
       starts the container from that image.

OOPPTTIIOONNSS
       --aa, ----aattttaacchh=[]
          Attach to STDIN, STDOUT or STDERR.

       In  foreground  mode  (the default when --dd is not specified), ddoocckkeerr rruunn can start the
       process in the container and attach the console to the process's standard input,  out‐
       put,  and  standard error. It can even pretend to be a TTY (this is what most command‐
       line executables expect) and pass along signals. The --aa option can be set for each  of
       stdin, stdout, and stderr.

       ----aadddd--hhoosstt=[]
          Add a custom host-to-IP mapping (host:ip)

       Add a line to /etc/hosts. The format is hostname:ip.  The ----aadddd--hhoosstt option can be set
       multiple times.

       ----bbllkkiioo--wweeiigghhtt=_0
          Block IO weight (relative weight) accepts a weight value between 10 and 1000.

       ----bbllkkiioo--wweeiigghhtt--ddeevviiccee=[]
          Block IO weight (relative device weight, format: DDEEVVIICCEE__NNAAMMEE::WWEEIIGGHHTT).

       ----ccppuu--sshhaarreess=_0
          CPU shares (relative weight)

       By default, all containers get the same proportion of CPU cycles. This proportion  can
       be  modified by changing the container's CPU share weighting relative to the weighting
       of all other running containers.

       To modify the proportion from the default of 1024, use the ----ccppuu--sshhaarreess  flag  to  set
       the weighting to 2 or higher.

       The  proportion  will only apply when CPU-intensive processes are running.  When tasks
       in one container are idle, other containers can use the left-over CPU time. The actual
       amount of CPU time will vary depending on the number of containers running on the sys‐
       tem.

       For example, consider three containers, one has a cpu-share of  1024  and  two  others
       have a cpu-share setting of 512. When processes in all three containers attempt to use
       100% of CPU, the first container would receive 50% of the total CPU time. If you add a
       fourth  container  with  a cpu-share of 1024, the first container only gets 33% of the
       CPU. The remaining containers receive 16.5%, 16.5% and 33% of the CPU.

       On a multi-core system, the shares of CPU time are distributed  over  all  CPU  cores.
       Even  if a container is limited to less than 100% of CPU time, it can use 100% of each
       individual CPU core.

       For example, consider a system with more than three cores. If you start one  container
       {{CC00}}  with --cc==551122 running one process, and another container {{CC11}} with --cc==11002244 running
       two processes, this can result in the following division of CPU shares:

              PID    container    CPU  CPU share
              100    {C0}         0    100% of CPU0
              101    {C1}         1    100% of CPU1
              102    {C1}         2    100% of CPU2

       ----ccaapp--aadddd=[]
          Add Linux capabilities

       ----ccaapp--ddrroopp=[]
          Drop Linux capabilities

       ----ccggrroouuppnnss=""
          Set the cgroup namespace mode for the container.
            hhoosstt:    run the container in the host's cgroup namespace
            pprriivvaattee: run the container in its own private cgroup namespace
            """":      (unset) use the daemon's default configuration (hhoosstt on cgroup v1,  pprrii‐‐
       vvaattee on cgroup v2)

       ----ccggrroouupp--ppaarreenntt=""
          Path  to  cgroups  under which the cgroup for the container will be created. If the
       path is not absolute, the path is considered to be relative to the cgroups path of the
       init process. Cgroups will be created if they do not already exist.

       ----cciiddffiillee=""
          Write the container ID to the file

       ----ccppuu--ccoouunntt=_0
           Limit the number of CPUs available for execution by the container.

              On Windows Server containers, this is approximated as a percentage of total CPU usage.

              On Windows Server containers, the processor resource controls are mutually exclusive, the order of precedence is CPUCount first, then CPUShares, and CPUPercent last.

       ----ccppuu--ppeerrcceenntt=_0
           Limit  the  percentage  of CPU available for execution by a container running on a
       Windows daemon.

              On Windows Server containers, the processor resource controls are mutually exclusive, the order of precedence is CPUCount first, then CPUShares, and CPUPercent last.

       ----ccppuu--ppeerriioodd=_0
          Limit the CPU CFS (Completely Fair Scheduler) period

       Limit the container's CPU usage. This flag tell the kernel to restrict the container's
       CPU usage to the period you specify.

       ----ccppuusseett--ccppuuss=""
          CPUs in which to allow execution (0-3, 0,1)

       ----ccppuusseett--mmeemmss=""
          Memory  nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA
       systems.

       If you have four memory nodes on your system (0-3), use  ----ccppuusseett--mmeemmss==00,,11  then  pro‐
       cesses in your Docker container will only use memory from the first two memory nodes.

       ----ccppuu--qquuoottaa=_0
          Limit the CPU CFS (Completely Fair Scheduler) quota

       Limit  the  container's  CPU  usage.  By  default,  containers  run  with the full CPU
       resource. This flag tell the kernel to restrict the container's CPU usage to the quota
       you specify.

       ----ccppuu--rrtt--ppeerriioodd=0
          Limit the CPU real-time period in microseconds

       Limit  the  container's Real Time CPU usage. This flag tell the kernel to restrict the
       container's Real Time CPU usage to the period you specify.

       ----ccppuu--rrtt--rruunnttiimmee=0
          Limit the CPU real-time runtime in microseconds

       Limit the containers Real Time CPU usage. This flag tells  the  kernel  to  limit  the
       amount of time in a given CPU period Real Time tasks may consume. Ex:
          Period of 1,000,000us and Runtime of 950,000us means that this container could con‐
       sume 95% of available CPU and leave the remaining 5% to normal priority tasks.

       The sum of all runtimes across containers cannot exceed the  amount  allotted  to  the
       parent cgroup.

       ----ccppuuss=0.0
          Number of CPUs. The default is _0_._0 which means no limit.

       --dd, ----ddeettaacchh=_t_r_u_e|_f_a_l_s_e
          Detached  mode: run the container in the background and print the new container ID.
       The default is _f_a_l_s_e.

       At any time you can run ddoocckkeerr ppss in the other shell to view a  list  of  the  running
       containers. You can reattach to a detached container with ddoocckkeerr aattttaacchh.

       When  attached  in  the tty mode, you can detach from the container (and leave it run‐
       ning) using a configurable key sequence. The default sequence is CCTTRRLL--pp  CCTTRRLL--qq.   You
       configure  the  key  sequence  using the ----ddeettaacchh--kkeeyyss option or a configuration file.
       See ccoonnffiigg--jjssoonn((55)) for documentation on using a configuration file.

       ----ddeettaacchh--kkeeyyss=_k_e_y
          Override the key sequence for detaching a container; _k_e_y is a single character from
       the [a-Z] range, or ccttrrll-_v_a_l_u_e, where _v_a_l_u_e is one of: aa--zz, @@, ^^, [[, ,,, or __.

       ----ddeevviiccee=_o_n_h_o_s_t:_i_n_c_o_n_t_a_i_n_e_r[:_m_o_d_e]
          Add  a  host  device  _o_n_h_o_s_t to the container under the _i_n_c_o_n_t_a_i_n_e_r name.  Optional
       _m_o_d_e parameter can be used to specify device permissions, it is  a  combination  of  rr
       (for read), ww (for write), and mm (for mmkknnoodd(2)).

       For example, ----ddeevviiccee==//ddeevv//ssddcc:://ddeevv//xxvvddcc::rrwwmm will give a container all permissions for
       the host device //ddeevv//ssddcc, seen as //ddeevv//xxvvddcc inside the container.

       ----ddeevviiccee--ccggrroouupp--rruullee="_t_y_p_e _m_a_j_o_r:_m_i_n_o_r _m_o_d_e"
          Add a rule to the cgroup allowed devices list. The rule is expected to  be  in  the
       format     specified     in     the    Linux    kernel    documentation    (Documenta‐
       tion/cgroup-v1/devices.txt):
            - _t_y_p_e: aa (all), cc (char), or bb (block);
            - _m_a_j_o_r and _m_i_n_o_r: either a number, or ** for all;
            - _m_o_d_e: a composition of rr (read), ww (write), and mm (mmkknnoodd(2)).

       Example: ----ddeevviiccee--ccggrroouupp--rruullee ""cc 11::33 mmrr"": allow for a character device  idendified  by
       11::33  to be created and read.

       ----ddeevviiccee--rreeaadd--bbppss=[]
          Limit read rate from a device (e.g. --device-read-bps=/dev/sda:1mb)

       ----ddeevviiccee--rreeaadd--iiooppss=[]
          Limit read rate from a device (e.g. --device-read-iops=/dev/sda:1000)

       ----ddeevviiccee--wwrriittee--bbppss=[]
          Limit write rate to a device (e.g. --device-write-bps=/dev/sda:1mb)

       ----ddeevviiccee--wwrriittee--iiooppss=[]
          Limit write rate to a device (e.g. --device-write-iops=/dev/sda:1000)

       ----ddnnss--sseeaarrcchh=[]
          Set  custom  DNS  search  domains  (Use --dns-search=. if you don't wish to set the
       search domain)

       ----ddnnss--ooppttiioonn=[]
          Set custom DNS options

       ----ddnnss=[]
          Set custom DNS servers

       This option can be used to override the DNS configuration  passed  to  the  container.
       Typically  this  is  necessary when the host DNS configuration is invalid for the con‐
       tainer (e.g., 127.0.0.1). When this is the case the ----ddnnss flags is necessary for every
       run.

       ----ddoommaaiinnnnaammee=""
          Container NIS domain name

       Sets the container's NIS domain name (see also sseettddoommaaiinnnnaammee((22))) that is
          available inside the container.

       --ee, ----eennvv=[]
          Set environment variables

       This  option  allows you to specify arbitrary environment variables that are available
       for the process that will be launched inside of the container.

       ----eennttrryyppooiinntt=""
          Overwrite the default ENTRYPOINT of the image

       This option allows you to overwrite the default entrypoint of the image that is set in
       the  Dockerfile.  The ENTRYPOINT of an image is similar to a COMMAND because it speci‐
       fies what executable to run when the container starts, but it is (purposely) more dif‐
       ficult  to  override. The ENTRYPOINT gives a container its default nature or behavior,
       so that when you set an ENTRYPOINT you can run  the  container  as  if  it  were  that
       binary,  complete  with default options, and you can pass in more options via the COM‐
       MAND. But, sometimes an operator may want to run something else inside the  container,
       so  you  can  override the default ENTRYPOINT at runtime by using a ----eennttrryyppooiinntt and a
       string to specify the new ENTRYPOINT.

       ----eennvv--ffiillee=[]
          Read in a line delimited file of environment variables

       ----eexxppoossee=[]
          Expose a port, or a range of ports (e.g. --expose=3300-3310)  informs  Docker  that
       the  container  listens  on  the  specified network ports at runtime. Docker uses this
       information to interconnect containers using links and to set up port  redirection  on
       the host system.

       ----ggrroouupp--aadddd=[]
          Add additional groups to run as

       --hh, ----hhoossttnnaammee=""
          Container host name

       Sets the container host name that is available inside the container.

       ----hheellpp
          Print usage statement

       ----iinniitt
          Run an init inside the container that forwards signals and reaps processes

       --ii, ----iinntteerraaccttiivvee=_t_r_u_e|_f_a_l_s_e
          Keep STDIN open even if not attached. The default is _f_a_l_s_e.

       When set to true, keep stdin open even if not attached.

       ----iipp=""
          Sets the container's interface IPv4 address (e.g., 172.23.0.9)

       It can only be used in conjunction with ----nneettwwoorrkk for user-defined networks

       ----iipp66=""
          Sets the container's interface IPv6 address (e.g., 2001:db8::1b99)

       It can only be used in conjunction with ----nneettwwoorrkk for user-defined networks

       ----iippcc=""
          Sets the IPC mode for the container. The following values are accepted:

       ┌─────────────────────┬─────────────────────────────────┐
       │VVaalluuee                │ DDeessccrriippttiioonn                     │
       ├─────────────────────┼─────────────────────────────────┤
       │(empty)              │ Use daemon's default.           │
       ├─────────────────────┼─────────────────────────────────┤
       │nnoonnee                 │ Own private IPC namespace, with │
       │                     │ /dev/shm not mounted.           │
       ├─────────────────────┼─────────────────────────────────┤
       │pprriivvaattee              │ Own private IPC namespace.      │
       ├─────────────────────┼─────────────────────────────────┤
       │sshhaarreeaabbllee            │ Own private IPC namespace, with │
       │                     │ a  possibility to share it with │
       │                     │ other containers.               │
       ├─────────────────────┼─────────────────────────────────┤
       │ccoonnttaaiinneerr::_n_a_m_e_-_o_r_-_I_D │ Join another ("shareable") con‐ │
       │                     │ tainer's IPC namespace.         │
       ├─────────────────────┼─────────────────────────────────┤
       │hhoosstt                 │ Use   the   host  system's  IPC │
       │                     │ namespace.                      │
       └─────────────────────┴─────────────────────────────────┘

       If not specified, daemon default is used, which can either be  pprriivvaattee  or  sshhaarreeaabbllee,
       depending on the daemon version and configuration.

       ----iissoollaattiioonn="_d_e_f_a_u_l_t"
          Isolation  specifies the type of isolation technology used by containers. Note that
       the default on Windows server is pprroocceessss, and the default on Windows client is hhyyppeerrvv.
       Linux only supports ddeeffaauulltt.

       --ll, ----llaabbeell _k_e_y=_v_a_l_u_e
          Set metadata on the container (for example, ----llaabbeell ccoomm..eexxaammppllee..kkeeyy==vvaalluuee).

       ----kkeerrnneell--mmeemmoorryy=_n_u_m_b_e_r[_S]
          Kernel memory limit; _S is an optional suffix which can be one of bb, kk, mm, or gg.

       Constrains  the  kernel  memory available to a container. If a limit of 0 is specified
       (not using ----kkeerrnneell--mmeemmoorryy), the container's kernel memory  is  not  limited.  If  you
       specify  a  limit,  it  may be rounded up to a multiple of the operating system's page
       size and the value can be very large, millions of trillions.

       ----llaabbeell--ffiillee=[]
          Read in a line delimited file of labels

       ----lliinnkk=_n_a_m_e_-_o_r_-_i_d[:_a_l_i_a_s]
          Add link to another container.

       If the operator uses ----lliinnkk when starting the new client container,  then  the  client
       container  can access the exposed port via a private networking interface. Docker will
       set some environment variables in the client container to help indicate  which  inter‐
       face and port to use.

       ----lliinnkk--llooccaall--iipp=[]
          Add one or more link-local IPv4/IPv6 addresses to the container's interface

       ----lloogg--ddrriivveerr="_j_s_o_n_-_f_i_l_e|_s_y_s_l_o_g|_j_o_u_r_n_a_l_d|_g_e_l_f|_f_l_u_‐
       _e_n_t_d|_a_w_s_l_o_g_s|_s_p_l_u_n_k|_e_t_w_l_o_g_s|_g_c_p_l_o_g_s|_n_o_n_e"
         Logging driver for the container. Default is defined by daemon ----lloogg--ddrriivveerr flag.
         WWaarrnniinngg: the ddoocckkeerr llooggss command works only for the jjssoonn--ffiillee and
         jjoouurrnnaalldd logging drivers.

       ----lloogg--oopptt=[]
         Logging driver specific options.

       --mm, ----mmeemmoorryy=_n_u_m_b_e_r[*S]
          Memory limit; _S is an optional suffix which can be one of bb, kk, mm, or gg.

       Allows you to constrain the memory available to a container. If the host supports swap
       memory, then the --mm memory setting can be larger than physical RAM. If a limit of 0 is
       specified (not using --mm), the container's memory is not limited. The actual limit  may
       be  rounded  up  to a multiple of the operating system's page size (the value would be
       very large, that's millions of trillions).

       ----mmeemmoorryy--rreesseerrvvaattiioonn=_n_u_m_b_e_r[*S]
          Memory soft limit; _S is an optional suffix which can be one of bb, kk, mm, or gg.

       After setting memory reservation, when the system detects  memory  contention  or  low
       memory,  containers  are forced to restrict their consumption to their reservation. So
       you should always set the value below ----mmeemmoorryy, otherwise the  hard  limit  will  take
       precedence. By default, memory reservation will be the same as memory limit.

       ----mmeemmoorryy--sswwaapp=_n_u_m_b_e_r[_S]
          Combined  memory plus swap limit; _S is an optional suffix which can be one of bb, kk,
       mm, or gg.

       This option can only be used together with ----mmeemmoorryy. The  argument  should  always  be
       larger  than  that  of ----mmeemmoorryy. Default is double the value of ----mmeemmoorryy. Set to --11 to
       enable unlimited swap.

       ----mmaacc--aaddddrreessss=""
          Container MAC address (e.g., 9922::dd00::cc66::00aa::2299::3333)

       Remember that the MAC address in  an  Ethernet  network  must  be  unique.   The  IPv6
       link-local address will be based on the device's MAC address according to RFC4862.

       ----mmoouunntt ttyyppee==_T_Y_P_E,_T_Y_P_E_-_S_P_E_C_I_F_I_C_-_O_P_T_I_O_N[,...]
          Attach a filesystem mount to the container

       Current supported mount TTYYPPEESS are bbiinndd, vvoolluummee, and ttmmppffss.

       e.g.

       ttyyppee==bbiinndd,,ssoouurrccee==//ppaatthh//oonn//hhoosstt,,ddeessttiinnaattiioonn==//ppaatthh//iinn//ccoonnttaaiinneerr

       ttyyppee==vvoolluummee,,ssoouurrccee==mmyy--vvoolluummee,,ddeessttiinnaattiioonn==//ppaatthh//iinn//ccoonnttaaiinneerr,,vvooll‐‐
       uummee--llaabbeell==""ccoolloorr==rreedd"",,vvoolluummee--llaabbeell==""sshhaappee==rroouunndd""

       ttyyppee==ttmmppffss,,ttmmppffss--ssiizzee==551122MM,,ddeessttiinnaattiioonn==//ppaatthh//iinn//ccoonnttaaiinneerr

       Common Options:

              · ssrrcc, ssoouurrccee: mount source spec for bbiinndd and vvoolluummee. Mandatory for bbiinndd.

              · ddsstt, ddeessttiinnaattiioonn, ttaarrggeett: mount destination spec.

              · rroo, rreeaaddoonnllyy: ttrruuee or ffaallssee (default).

       NNoottee: setting rreeaaddoonnllyy for a bind mount does not make its submounts
          read-only on the current Linux implementation. See also bbiinndd--nnoonnrreeccuurrssiivvee.

       Options specific to bbiinndd:

              · bbiinndd--pprrooppaaggaattiioonn:  sshhaarreedd,  ssllaavvee,  pprriivvaattee,  rrsshhaarreedd,   rrssllaavvee,   or   rrpprrii‐‐
                vvaattee(default). See also mmoouunntt((22)).

              · ccoonnssiisstteennccyy:  ccoonnssiisstteenntt(default),  ccaacchheedd,  or  ddeelleeggaatteedd.  Currently,  only
                effective for Docker for Mac.

              · bbiinndd--nnoonnrreeccuurrssiivvee: ttrruuee or ffaallssee (default). If set to ttrruuee, submounts are not
                recursively bind-mounted. This option is useful for rreeaaddoonnllyy bind mount.

       Options specific to vvoolluummee:

              · vvoolluummee--ddrriivveerr: Name of the volume-driver plugin.

              · vvoolluummee--llaabbeell: Custom metadata.

              · vvoolluummee--nnooccooppyy:  ttrruuee(default)  or  ffaallssee.  If set to ffaallssee, the Engine copies
                existing files and directories under the mount-path into the volume, allowing
                the host to access them.

              · vvoolluummee--oopptt: specific to a given volume driver.

       Options specific to ttmmppffss:

              · ttmmppffss--ssiizzee: Size of the tmpfs mount in bytes. Unlimited by default in Linux.

              · ttmmppffss--mmooddee:  File mode of the tmpfs in octal. (e.g. 770000 or 00770000.) Defaults to
                11777777 in Linux.

       ----nnaammee=""
          Assign a name to the container

       The operator can identify a container in three ways:

       ┌──────────────────────┬────────────────────────────────────────────────────────────────────┐
       │IIddeennttiiffiieerr ttyyppee       │ EExxaammppllee vvaalluuee                                                      │
       ├──────────────────────┼────────────────────────────────────────────────────────────────────┤
       │UUID long identifier  │ "f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778" │
       ├──────────────────────┼────────────────────────────────────────────────────────────────────┤
       │UUID short identifier │ "f78375b1c487"                                                     │
       ├──────────────────────┼────────────────────────────────────────────────────────────────────┤
       │Name                  │ "evil_ptolemy"                                                     │
       └──────────────────────┴────────────────────────────────────────────────────────────────────┘

       The UUID identifiers come from the Docker daemon, and if a name is not assigned to the
       container with ----nnaammee then the daemon will also generate a  random  string  name.  The
       name  is useful when defining links (see ----lliinnkk) (or any other place you need to iden‐
       tify a container). This works for both background and foreground Docker containers.

       ----nneettwwoorrkk=_t_y_p_e
          Set the Network mode for the container. Supported values are:

       ┌───────────────────────────────┬─────────────────────────────────┐
       │VVaalluuee                          │ DDeessccrriippttiioonn                     │
       ├───────────────────────────────┼─────────────────────────────────┤
       │nnoonnee                           │ No networking in the container. │
       ├───────────────────────────────┼─────────────────────────────────┤
       │bbrriiddggee                         │ Connect the  container  to  the │
       │                               │ default  Docker bridge via veth │
       │                               │ interfaces.                     │
       ├───────────────────────────────┼─────────────────────────────────┤
       │hhoosstt                           │ Use the  host's  network  stack │
       │                               │ inside the container.           │
       ├───────────────────────────────┼─────────────────────────────────┤
       │ccoonnttaaiinneerr::_n_a_m_e|_i_d              │ Use   the   network   stack  of │
       │                               │ another  container,   specified │
       │                               │ via its                         │
       ├───────────────────────────────┼─────────────────────────────────┤
       │_n_a_m_e or                        │                                 │
       ├───────────────────────────────┼─────────────────────────────────┤
       │_i_d.                            │                                 │
       ├───────────────────────────────┼─────────────────────────────────┤
       │_n_e_t_w_o_r_k_-_n_a_m_e|_n_e_t_w_o_r_k_-_i_d        │ Connects  the  container  to  a │
       │                               │ user created network (using     │
       ├───────────────────────────────┼─────────────────────────────────┤
       │ddoocckkeerr nneettwwoorrkk ccrreeaattee command) │                                 │
       └───────────────────────────────┴─────────────────────────────────┘

       Default is bbrriiddggee.

       ----nneettwwoorrkk--aalliiaass=[]
          Add network-scoped alias for the container

       ----oooomm--kkiillll--ddiissaabbllee=_t_r_u_e|_f_a_l_s_e
          Whether to disable OOM Killer for the container or not.

       ----oooomm--ssccoorree--aaddjj=""
          Tune the host's OOM preferences for containers (accepts -1000 to 1000)

       --PP, ----ppuubblliisshh--aallll=_t_r_u_e|_f_a_l_s_e
          Publish all exposed ports to random ports on the host interfaces.  The  default  is
       _f_a_l_s_e.

       When  set  to  true  publish  all exposed ports to the host interfaces. The default is
       false. If the operator uses -P (or -p) then Docker will make the exposed port accessi‐
       ble on the host and the ports will be available to any client that can reach the host.
       When using -P, Docker will bind any exposed port to a random port on the  host  within
       an _e_p_h_e_m_e_r_a_l _p_o_r_t _r_a_n_g_e defined by //pprroocc//ssyyss//nneett//iippvv44//iipp__llooccaall__ppoorrtt__rraannggee. To find the
       mapping between the host ports and the exposed ports, use ddoocckkeerr ppoorrtt(1).

       --pp, ----ppuubblliisshh _i_p:[_h_o_s_t_P_o_r_t]:_c_o_n_t_a_i_n_e_r_P_o_r_t | [_h_o_s_t_P_o_r_t:]_c_o_n_t_a_i_n_e_r_P_o_r_t
          Publish a container's port, or range of ports, to the host.

       Both _h_o_s_t_P_o_r_t and _c_o_n_t_a_i_n_e_r_P_o_r_t can be specified as a range.  When  specifying  ranges
       for both, the number of ports in ranges should be equal.

       Examples: --pp 11223344--11223366::11222222--11222244, --pp 112277..00..00..11::$$HHOOSSTTPPOORRTT::$$CCOONNTTAAIINNEERRPPOORRTT.

       Use  ddoocckkeerr  ppoorrtt(1) to see the actual mapping, e.g. ddoocckkeerr ppoorrtt CCOONNTTAAIINNEERR $$CCOONNTTAAIINNEERR‐‐
       PPOORRTT.

       ----ppiidd=""
          Set the PID mode for the container
          Default is to create a private PID namespace for the container
                                      'container:': join another container's PID namespace
                                      'host': use the host's PID namespace for the container.
       Note: the host mode gives the container full access to local PID and is therefore con‐
       sidered insecure.

       ----uusseerrnnss=""
          Set the usernamespace mode for the container when uusseerrnnss--rreemmaapp option is enabled.
            hhoosstt: use the  host  usernamespace  and  enable  all  privileged  options  (e.g.,
       ppiidd==hhoosstt or ----pprriivviilleeggeedd).

       ----ppiiddss--lliimmiitt=""
          Tune the container's pids (process IDs) limit. Set to --11 to have unlimited pids for
       the container.

       ----uuttss=_t_y_p_e
          Set the UTS mode for the container. The only possible _t_y_p_e is hhoosstt, meaning to  use
       the host's UTS namespace inside the container.
            Note:  the  host  mode gives the container access to changing the host's hostname
       and is therefore considered insecure.

       ----pprriivviilleeggeedd [ttrruuee|ffaallssee]
          Give extended privileges to this  container.  A  "privileged"  container  is  given
       access to all devices.

       When  the  operator executes ddoocckkeerr rruunn ----pprriivviilleeggeedd, Docker will enable access to all
       devices on the host as well as set some configuration in AppArmor to  allow  the  con‐
       tainer  nearly  all the same access to the host as processes running outside of a con‐
       tainer on the host.

       ----rreeaadd--oonnllyy=ttrruuee|ffaallssee
          Mount the container's root filesystem as read only.

       By default a container will have its root filesystem writable  allowing  processes  to
       write  files anywhere.  By specifying the ----rreeaadd--oonnllyy flag the container will have its
       root filesystem mounted as read only prohibiting any writes.

       ----rreessttaarrtt _p_o_l_i_c_y
          Restart policy to apply when a container exits. Supported values are:

       ┌─────────────────────────┬─────────────────────────────────┐
       │PPoolliiccyy                   │ RReessuulltt                          │
       ├─────────────────────────┼─────────────────────────────────┤
       │nnoo                       │ Do  not  automatically  restart │
       │                         │ the container when it exits.    │
       ├─────────────────────────┼─────────────────────────────────┤
       │oonn--ffaaiilluurree[:_m_a_x_-_r_e_t_r_i_e_s] │ Restart  only  if the container │
       │                         │ exits with a non-zero exit sta‐ │
       │                         │ tus. Optionally, limit the num‐ │
       │                         │ ber  of  restart  retries   the │
       │                         │ Docker daemon attempts.         │
       ├─────────────────────────┼─────────────────────────────────┤
       │aallwwaayyss                   │ Always  restart  the  container │
       │                         │ regardless of the exit  status. │
       │                         │ When  you  specify  always, the │
       │                         │ Docker  daemon  will   try   to │
       │                         │ restart  the  container indefi‐ │
       │                         │ nitely. The container will also │
       │                         │ always start on daemon startup, │
       │                         │ regardless of the current state │
       │                         │ of the container.               │
       ├─────────────────────────┼─────────────────────────────────┤
       │uunnlleessss--ssttooppppeedd           │ Always  restart  the  container │
       │                         │ regardless of the exit  status, │
       │                         │ but  do  not start it on daemon │
       │                         │ startup if  the  container  has │
       │                         │ been  put  to  a  stopped state │
       │                         │ before.                         │
       └─────────────────────────┴─────────────────────────────────┘

       Default is nnoo.

       ----rrmm ttrruuee|ffaallssee
          Automatically remove the container when it exits. The default is ffaallssee.
          ----rrmm flag can work together with --dd, and auto-removal will be done on daemon  side.
       Note that it's incompatible with any restart policy other than nnoonnee.

       ----sseeccuurriittyy--oopptt _v_a_l_u_e[,...]
          Security Options for the container. The following options can be given:

              "label=user:USER"   : Set the label user for the container
              "label=role:ROLE"   : Set the label role for the container
              "label=type:TYPE"   : Set the label type for the container
              "label=level:LEVEL" : Set the label level for the container
              "label=disable"     : Turn off label confinement for the container
              "no-new-privileges" : Disable container processes from gaining additional privileges

              "seccomp=unconfined" : Turn off seccomp confinement for the container
              "seccomp=profile.json :  White listed syscalls seccomp Json file to be used as a seccomp filter

              "apparmor=unconfined" : Turn off apparmor confinement for the container
              "apparmor=your-profile" : Set the apparmor confinement profile for the container

       ----ssttoorraaggee--oopptt
          Storage driver options per container

       $ docker run -it --storage-opt size=120G fedora /bin/bash

       This (size) will allow to set the container rootfs size to 120G at creation time.
          This  option is only available for the ddeevviicceemmaappppeerr, bbttrrffss, oovveerrllaayy22  and zzffss graph
       drivers.
          For the ddeevviicceemmaappppeerr, bbttrrffss and zzffss storage drivers, user cannot pass a  size  less
       than the Default BaseFS Size.
          For  the  oovveerrllaayy22 storage driver, the size option is only available if the backing
       fs is xxffss and mounted with the ppqquuoottaa mount option.
          Under these conditions, user can pass any size less than the backing fs size.

       ----ssttoopp--ssiiggnnaall=_S_I_G_T_E_R_M
         Signal to stop a container. Default is SIGTERM.

       ----ssttoopp--ttiimmeeoouutt=_1_0
         Timeout (in seconds) to stop a container. Default is 10.

       ----sshhmm--ssiizzee=""
          Size of //ddeevv//sshhmm. The format is <<nnuummbbeerr>><<uunniitt>>.
          nnuummbbeerr must be greater than 00.  Unit is optional and can be  bb  (bytes),  kk  (kilo‐
       bytes), mm(megabytes), or gg (gigabytes).
          If  you  omit  the  unit, the system uses bytes. If you omit the size entirely, the
       system uses 6644mm.

       ----ssyyssccttll=SYSCTL
         Configure namespaced kernel parameters at runtime

       IPC Namespace - current sysctls allowed:

       kernel.msgmax, kernel.msgmnb, kernel.msgmni, kernel.sem, kernel.shmall, kernel.shmmax,
       kernel.shmmni, kernel.shm_rmid_forced
         Sysctls beginning with fs.mqueue.*

       If you use the ----iippcc==hhoosstt option these sysctls will not be allowed.

       Network Namespace - current sysctls allowed:
             Sysctls beginning with net.*

       If you use the ----nneettwwoorrkk==hhoosstt option these sysctls will not be allowed.

       ----ssiigg--pprrooxxyy=_t_r_u_e|_f_a_l_s_e
          Proxy  received  signals  to the process (non-TTY mode only). SIGCHLD, SIGSTOP, and
       SIGKILL are not proxied. The default is _t_r_u_e.

       ----mmeemmoorryy--sswwaappppiinneessss=""
          Tune a container's memory swappiness behavior. Accepts an  integer  between  0  and
       100.

       --tt, ----ttttyy=_t_r_u_e|_f_a_l_s_e
          Allocate a pseudo-TTY. The default is _f_a_l_s_e.

       When  set to true Docker can allocate a pseudo-tty and attach to the standard input of
       any container. This can be used, for example, to run a  throwaway  interactive  shell.
       The default is false.

       The --tt option is incompatible with a redirection of the docker client standard input.

       ----ttmmppffss=[] Create a tmpfs mount

       Mount a temporary filesystem (ttmmppffss) mount into a container, for example:

       $ docker run -d --tmpfs /tmp:rw,size=787448k,mode=1777 my_image

       This command mounts a ttmmppffss at //ttmmpp within the container.  The supported mount options
       are the same as the Linux default mmoouunntt flags. If you do not specify any options,  the
       systems uses the following options: rrww,,nnooeexxeecc,,nnoossuuiidd,,nnooddeevv,,ssiizzee==6655553366kk.

       See also ----mmoouunntt, which is the successor of ----ttmmppffss and ----vvoolluummee.
          Even though there is no plan to deprecate ----ttmmppffss, usage of ----mmoouunntt is recommended.

       --uu, ----uusseerr=""
          Sets the username or UID used and optionally the groupname or GID for the specified
       command.

       The followings examples are all valid:
          --user [user | user:group | uid | uid:gid | user:gid | uid:group ]

       Without this argument the command will be run as root in the container.

       ----uulliimmiitt=[]
           Ulimit options

       --vv|----vvoolluummee[=_[_[_H_O_S_T_-_D_I_R_:_]_C_O_N_T_A_I_N_E_R_-_D_I_R_[_:_O_P_T_I_O_N_S_]_]]
          Create a bind mount. If you specify, --vv //HHOOSSTT--DDIIRR:://CCOONNTTAAIINNEERR--DDIIRR, Docker
          bind mounts //HHOOSSTT--DDIIRR in the host to //CCOONNTTAAIINNEERR--DDIIRR in the Docker
          container. If 'HOST-DIR' is omitted,  Docker automatically creates the new
          volume on the host.  The OOPPTTIIOONNSS are a comma delimited list and can be:

              · [rw|ro]

              · [z|Z]

              · [[[rr]]sshhaarreedd|[[rr]]ssllaavvee|[[rr]]pprriivvaattee]

              · [ddeelleeggaatteedd|ccaacchheedd|ccoonnssiisstteenntt]

              · [nocopy]

       The CCOONNTTAAIINNEERR--DDIIRR must be an absolute path such as //ssrrcc//ddooccss. The HHOOSSTT--DDIIRR can  be  an
       absolute path or a nnaammee value. A nnaammee value must start with an alphanumeric character,
       followed by aa--zz00--99, __ (underscore), .. (period) or -- (hyphen). An absolute path  starts
       with a // (forward slash).

       If you supply a HHOOSSTT--DDIIRR that is an absolute path,  Docker bind-mounts to the path you
       specify. If you supply a nnaammee, Docker creates a named volume by that nnaammee.  For  exam‐
       ple,  you  can specify either //ffoooo or ffoooo for a HHOOSSTT--DDIIRR value. If you supply the //ffoooo
       value, Docker creates a bind mount. If you supply the ffoooo specification,  Docker  cre‐
       ates a named volume.

       You  can  specify  multiple  --vv options to mount one or more mounts to a container. To
       use these same mounts in other containers, specify the ----vvoolluummeess--ffrroomm option also.

       You can supply additional options for each bind mount following an  additional  colon.
       A  ::rroo or ::rrww suffix mounts a volume in read-only or read-write mode, respectively. By
       default, volumes are mounted in read-write mode.  You can also specify the consistency
       requirement  for  the mount, either ::ccoonnssiisstteenntt (the default), ::ccaacchheedd, or ::ddeelleeggaatteedd.
       Multiple options are separated by commas, e.g. ::rroo,,ccaacchheedd.

       Labeling systems like SELinux require that proper labels are placed on volume  content
       mounted  into a container. Without a label, the security system might prevent the pro‐
       cesses running inside the container from using the content. By  default,  Docker  does
       not change the labels set by the OS.

       To  change  a label in the container context, you can add either of two suffixes ::zz or
       ::ZZ to the volume mount. These suffixes tell Docker to  relabel  file  objects  on  the
       shared  volumes.  The  zz option tells Docker that two containers share the volume con‐
       tent. As a result, Docker labels the content with a shared content label. Shared  vol‐
       ume  labels  allow all containers to read/write content.  The ZZ option tells Docker to
       label the content with a private unshared label.  Only the current container can use a
       private volume.

       By  default  bind  mounted volumes are pprriivvaattee. That means any mounts done inside con‐
       tainer will not be visible on host and vice-a-versa. One can change this  behavior  by
       specifying  a  volume  mount  propagation property. Making a volume sshhaarreedd mounts done
       under that volume inside container will be visible on host and vice-a-versa. Making  a
       volume  ssllaavvee  enables  only one way mount propagation and that is mounts done on host
       under that volume will be visible inside container but not the other way around.

       To control mount propagation property of volume one can use ::[[rr]]sshhaarreedd,  ::[[rr]]ssllaavvee  or
       ::[[rr]]pprriivvaattee  propagation  flag.  Propagation  property  can be specified only for bind
       mounted volumes and not for internal volumes or named volumes. For  mount  propagation
       to  work  source  mount point (mount point where source dir is mounted on) has to have
       right propagation properties. For shared volumes, source mount point has to be shared.
       And for slave volumes, source mount has to be either shared or slave.

       Use  ddff  <<ssoouurrccee--ddiirr>>  to  figure  out  the  source mount and then use ffiinnddmmnntt --oo TTAARR‐‐
       GGEETT,,PPRROOPPAAGGAATTIIOONN <<ssoouurrccee--mmoouunntt--ddiirr>> to figure  out  propagation  properties  of  source
       mount.  If  ffiinnddmmnntt  utility  is  not  available, then one can look at mount entry for
       source mount point in //pprroocc//sseellff//mmoouunnttiinnffoo. Look at ooppttiioonnaall ffiieellddss  and  see  if  any
       propagation  properties are specified.  sshhaarreedd::XX means mount is sshhaarreedd, mmaasstteerr::XX means
       mount is ssllaavvee and if nothing is there that means mount is pprriivvaattee.

       To change propagation properties of a mount point use mmoouunntt command. For  example,  if
       one  wants  to  bind mount source directory //ffoooo one can do mmoouunntt ----bbiinndd //ffoooo //ffoooo and
       mmoouunntt ----mmaakkee--pprriivvaattee ----mmaakkee--sshhaarreedd //ffoooo. This will convert /foo into  a  sshhaarreedd  mount
       point.  Alternatively  one can directly change propagation properties of source mount.
       Say // is source mount for //ffoooo, then use mmoouunntt ----mmaakkee--sshhaarreedd // to  convert  //  into  a
       sshhaarreedd mount.

              NNoottee:  When  using systemd to manage the Docker daemon's start and stop, in the
              systemd unit file there is an option  to  control  mount  propagation  for  the
              Docker  daemon  itself,  called MMoouunnttFFllaaggss. The value of this setting may cause
              Docker to not see mount propagation changes made on the mount point. For  exam‐
              ple,  if  this value is ssllaavvee, you may not be able to use the sshhaarreedd or rrsshhaarreedd
              propagation on a volume.

       To disable automatic copying of data from the container path to the  volume,  use  the
       nnooccooppyy flag. The nnooccooppyy flag can be set on bind mounts and named volumes.

       See  also  ----mmoouunntt, which is the successor of ----ttmmppffss and ----vvoolluummee.  Even though there
       is no plan to deprecate ----vvoolluummee, usage of ----mmoouunntt is recommended.

       ----vvoolluummee--ddrriivveerr=""
          Container's volume driver. This driver creates volumes specified either from
          a Dockerfile's VVOOLLUUMMEE instruction or from the ddoocckkeerr rruunn --vv flag.
          See ddoocckkeerr--vvoolluummee--ccrreeaattee((11)) for full details.

       ----vvoolluummeess--ffrroomm=[]
          Mount volumes from the specified container(s)

       Mounts already mounted volumes from a source container onto another
          container. You must supply the source's container-id. To share
          a volume, use the ----vvoolluummeess--ffrroomm option when running
          the target container. You can share volumes even if the source container
          is not running.

       By default, Docker mounts the volumes in the same mode (read-write or
          read-only) as it is mounted in the source container. Optionally, you
          can change this by suffixing the container-id with either the ::rroo or
          ::rrww keyword.

       If the location of the volume from the source container overlaps with
          data residing on a target container, then the volume hides
          that data on the target.

       --ww, ----wwoorrkkddiirr=""
          Working directory inside the container

       The default working directory for running binaries within  a  container  is  the  root
       directory  (/).  The developer can set a different default with the Dockerfile WORKDIR
       instruction. The operator can override the working directory by using the --ww option.

EExxiitt SSttaattuuss
       The exit code from ddoocckkeerr rruunn gives information about why the container failed to  run
       or  why  it exited.  When ddoocckkeerr rruunn exits with a non-zero code, the exit codes follow
       the cchhrroooott standard, see below:

       _1_2_5 _i_f _t_h_e _e_r_r_o_r _i_s _w_i_t_h _D_o_c_k_e_r _d_a_e_m_o_n _i_t_s_e_l_f

              $ docker run --foo busybox; echo $?
              # flag provided but not defined: --foo
                See 'docker run --help'.
                125

       _1_2_6 _i_f _t_h_e _c_o_n_t_a_i_n_e_d _c_o_m_m_a_n_d _c_a_n_n_o_t _b_e _i_n_v_o_k_e_d

              $ docker run busybox /etc; echo $?
              # exec: "/etc": permission denied
                docker: Error response from daemon: Contained command could not be invoked
                126

       _1_2_7 _i_f _t_h_e _c_o_n_t_a_i_n_e_d _c_o_m_m_a_n_d _c_a_n_n_o_t _b_e _f_o_u_n_d

              $ docker run busybox foo; echo $?
              # exec: "foo": executable file not found in $PATH
                docker: Error response from daemon: Contained command not found or does not exist
                127

       _E_x_i_t _c_o_d_e _o_f _c_o_n_t_a_i_n_e_d _c_o_m_m_a_n_d _o_t_h_e_r_w_i_s_e

              $ docker run busybox /bin/sh -c 'exit 3'
              # 3

EEXXAAMMPPLLEESS
RRuunnnniinngg ccoonnttaaiinneerr iinn rreeaadd--oonnllyy mmooddee
       During container image development, containers often need to write to the  image  con‐
       tent.  Installing packages into /usr, for example.  In production, applications seldom
       need to write to the image.  Container applications write to volumes if they  need  to
       write to file systems at all.  Applications can be made more secure by running them in
       read-only mode using the --read-only switch.  This protects the containers image  from
       modification.  Read  only containers may still need to write temporary data.  The best
       way to handle this is to mount tmpfs directories on /run and /tmp.

              # docker run --read-only --tmpfs /run --tmpfs /tmp -i -t fedora /bin/bash

EExxppoossiinngg lloogg mmeessssaaggeess ffrroomm tthhee ccoonnttaaiinneerr ttoo tthhee hhoosstt''ss lloogg
       If you want messages that are logged in your container to show up in the  host's  sys‐
       log/journal then you should bind mount the /dev/log directory as follows.

              # docker run -v /dev/log:/dev/log -i -t fedora /bin/bash

       From inside the container you can test this by sending a message to the log.

              (bash)# logger "Hello from my container"

       Then exit and check the journal.

              # exit

              # journalctl -b | grep Hello

       This should list the message sent to logger.

AAttttaacchhiinngg ttoo oonnee oorr mmoorree ffrroomm SSTTDDIINN,, SSTTDDOOUUTT,, SSTTDDEERRRR
       If  you  do  not  specify  -a then Docker will attach everything (stdin,stdout,stderr)
       you'd like to connect instead, as in:

              # docker run -a stdin -a stdout -i -t fedora /bin/bash

SShhaarriinngg IIPPCC bbeettwweeeenn ccoonnttaaiinneerrss
       Using shm_server.c available here: https://www.cs.cf.ac.uk/Dave/C/node27.html

       Testing ----iippcc==hhoosstt mode:

       Host shows a shared memory segment with 7 pids attached, happens to be from httpd:

               $ sudo ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x01128e25 0          root       600        1000       7

       Now run a regular container, and it correctly does NOT see the shared  memory  segment
       from the host:

               $ docker run -it shm ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status

       Run a container with the new ----iippcc==hhoosstt option, and it now sees the shared memory seg‐
       ment from the host httpd:

               $ docker run -it --ipc=host shm ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x01128e25 0          root       600        1000       7

       Testing ----iippcc==ccoonnttaaiinneerr::CCOONNTTAAIINNEERRIIDD mode:

       Start a container with a program to create a shared memory segment:

               $ docker run -it shm bash
               $ sudo shm/shm_server
               $ sudo ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x0000162e 0          root       666        27         1

       Create a 2nd container correctly shows no shared memory segment from 1st container:

               $ docker run shm ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status

       Create a 3rd container using the new --ipc=container:CONTAINERID option, now it  shows
       the shared memory segment from the first:

               $ docker run -it --ipc=container:ed735b2264ac shm ipcs -m
               $ sudo ipcs -m

               ------ Shared Memory Segments --------
               key        shmid      owner      perms      bytes      nattch     status
               0x0000162e 0          root       666        27         1

LLiinnkkiinngg CCoonnttaaiinneerrss
              NNoottee: This section describes linking between containers on the default (bridge)
              network, also known as "legacy links". Using ----lliinnkk  on  user-defined  networks
              uses  the  DNS-based  discovery,  which does not add entries to //eettcc//hhoossttss, and
              does not set environment variables for discovery.

       The link feature allows multiple containers to communicate with each other. For  exam‐
       ple, a container whose Dockerfile has exposed port 80 can be run and named as follows:

              # docker run --name=link-test -d -i -t fedora/httpd

       A  second  container,  in this case called linker, can communicate with the httpd con‐
       tainer, named link-test, by running with the ----lliinnkk==::

              # docker run -t -i --link=link-test:lt --name=linker fedora /bin/bash

       Now the container linker is linked to container link-test with the alias lt.   Running
       the eennvv command in the linker container shows environment variables
        with the LT (alias) context (LLTT__)

              # env
              HOSTNAME=668231cb0978
              TERM=xterm
              LT_PORT_80_TCP=tcp://172.17.0.3:80
              LT_PORT_80_TCP_PORT=80
              LT_PORT_80_TCP_PROTO=tcp
              LT_PORT=tcp://172.17.0.3:80
              PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              PWD=/
              LT_NAME=/linker/lt
              SHLVL=1
              HOME=/
              LT_PORT_80_TCP_ADDR=172.17.0.3
              _=/usr/bin/env

       When linking two containers Docker will use the exposed ports of the container to cre‐
       ate a secure tunnel for the parent to access.

       If a container is connected to the default bridge network and lliinnkkeedd with  other  con‐
       tainers,  then  the container's //eettcc//hhoossttss file is updated with the linked container's
       name.

              NNoottee Since Docker may live update the container's //eettcc//hhoossttss file, there may be
              situations  when  processes inside the container can end up reading an empty or
              incomplete //eettcc//hhoossttss file. In most cases, retrying the read again  should  fix
              the problem.

MMaappppiinngg PPoorrttss ffoorr EExxtteerrnnaall UUssaaggee
       The exposed port of an application can be mapped to a host port using the --pp flag. For
       example, an httpd port 80 can be mapped to the host port 8080 using the following:

              # docker run -p 8080:80 -d -i -t fedora/httpd

CCrreeaattiinngg aanndd MMoouunnttiinngg aa DDaattaa VVoolluummee CCoonnttaaiinneerr
       Many applications require the sharing of persistent data  across  several  containers.
       Docker  allows  you  to create a Data Volume Container that other containers can mount
       from. For example, create a named container that contains directories /var/volume1 and
       /tmp/volume2.  The  image  will  need  to contain these directories so a couple of RUN
       mkdir instructions might be required for you fedora-data image:

              # docker run --name=data -v /var/volume1 -v /tmp/volume2 -i -t fedora-data true
              # docker run --volumes-from=data --name=fedora-container1 -i -t fedora bash

       Multiple --volumes-from parameters will bring together multiple data volumes from mul‐
       tiple  containers. And it's possible to mount the volumes that came from the DATA con‐
       tainer in yet another container  via  the  fedora-container1  intermediary  container,
       allowing to abstract the actual data source from users of that data:

              # docker run --volumes-from=fedora-container1 --name=fedora-container2 -i -t fedora bash

MMoouunnttiinngg EExxtteerrnnaall VVoolluummeess
       To  mount  a  host  directory  as a container volume, specify the absolute path to the
       directory and the absolute path for the container directory separated by a colon:

              # docker run -v /var/db:/data1 -i -t fedora bash

       When using SELinux, be aware that the host has no knowledge of container SELinux  pol‐
       icy.  Therefore,  in  the  above  example,  if SELinux policy is enforced, the //vvaarr//ddbb
       directory is not writable to the container. A "Permission Denied" message  will  occur
       and an avc: message in the host's syslog.

       To  work around this, at time of writing this man page, the following command needs to
       be run in order for the proper SELinux policy type label to be attached  to  the  host
       directory:

              # chcon -Rt svirt_sandbox_file_t /var/db

       Now,  writing  to  the  /data1 volume in the container will be allowed and the changes
       will also be reflected on the host in /var/db.

UUssiinngg aalltteerrnnaattiivvee sseeccuurriittyy llaabbeelliinngg
       You can override the default labeling scheme for  each  container  by  specifying  the
       ----sseeccuurriittyy--oopptt flag. For example, you can specify the MCS/MLS level, a requirement for
       MLS systems. Specifying the level in the following command allows  you  to  share  the
       same content between containers.

              # docker run --security-opt label=level:s0:c100,c200 -i -t fedora bash

       An MLS example might be:

              # docker run --security-opt label=level:TopSecret -i -t rhel7 bash

       To  disable the security labeling for this container versus running with the ----ppeerrmmiiss‐‐
       ssiivvee flag, use the following command:

              # docker run --security-opt label=disable -i -t fedora bash

       If you want a tighter security policy on the processes within  a  container,  you  can
       specify  an  alternate  type for the container. You could run a container that is only
       allowed to listen on Apache ports by executing the following command:

              # docker run --security-opt label=type:svirt_apache_t -i -t centos bash

       Note:

       You would have to write policy defining a ssvviirrtt__aappaacchhee__tt type.

SSeettttiinngg ddeevviiccee wweeiigghhtt
       If you want to set //ddeevv//ssddaa device weight to 220000, you can specify the device weight by
       ----bbllkkiioo--wweeiigghhtt--ddeevviiccee flag. Use the following command:

              # docker run -it --blkio-weight-device "/dev/sda:200" ubuntu

SSppeecciiffyy iissoollaattiioonn tteecchhnnoollooggyy ffoorr ccoonnttaaiinneerr ((----iissoollaattiioonn))
       This  option is useful in situations where you are running Docker containers on Micro‐
       soft Windows. The ----iissoollaattiioonn <<vvaalluuee>> option sets a container's isolation  technology.
       On  Linux, the only supported is the ddeeffaauulltt option which uses Linux namespaces. These
       two commands are equivalent on Linux:

              $ docker run -d busybox top
              $ docker run -d --isolation default busybox top

       On Microsoft Windows, can take any of these values:

              · ddeeffaauulltt: Use the value specified by the Docker daemon's ----eexxeecc--oopptt .  If  the
                ddaaeemmoonn  does  not  specify  an  isolation  technology, Microsoft Windows uses
                pprroocceessss as its default value.

              · pprroocceessss: Namespace isolation only.

              · hhyyppeerrvv: Hyper-V hypervisor partition-based isolation.

       In practice, when running on Microsoft Windows without a ddaaeemmoonn option set,  these two
       commands are equivalent:

              $ docker run -d --isolation default busybox top
              $ docker run -d --isolation process busybox top

       If  you  have  set the ----eexxeecc--oopptt iissoollaattiioonn==hhyyppeerrvv option on the Docker ddaaeemmoonn, any of
       these commands also result in hhyyppeerrvv isolation:

              $ docker run -d --isolation default busybox top
              $ docker run -d --isolation hyperv busybox top

SSeettttiinngg NNaammeessppaacceedd KKeerrnneell PPaarraammeetteerrss ((SSyyssccttllss))
       The ----ssyyssccttll sets namespaced kernel parameters (sysctls) in the container.  For  exam‐
       ple, to turn on IP forwarding in the containers network namespace, run this command:

              $ docker run --sysctl net.ipv4.ip_forward=1 someimage

       Note:

       Not  all  sysctls are namespaced. Docker does not support changing sysctls inside of a
       container that also modify the host system. As the kernel evolves  we  expect  to  see
       more sysctls become namespaced.

       See  the  definition  of  the  ----ssyyssccttll option above for the current list of supported
       sysctls.

HHIISSTTOORRYY
       April 2014, Originally compiled by William Henry (whenry at redhat dot com)  based  on
       docker.com  source  material  and  internal work.  June 2014, updated by Sven Dowideit
       SvenDowideit@home.org.au ⟨mailto:SvenDowideit@home.org.au⟩ July 2014, updated by  Sven
       Dowideit  SvenDowideit@home.org.au  ⟨mailto:SvenDowideit@home.org.au⟩  November  2015,
       updated by Sally O'Malley somalley@redhat.com ⟨mailto:somalley@redhat.com⟩

Docker Community                          JUNE 2014                                 DOCKER(1)
